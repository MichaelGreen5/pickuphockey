# Generated by Django 4.1 on 2023-03-08 02:26

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('OrgDash', '0007_alter_autorecurringskate_frequency'),
    ]

    operations = [
        migrations.CreateModel(
            name='Invitation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_invited', models.DateTimeField(auto_now_add=True)),
                ('will_you_attend', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Waitlist', 'Put me on the waitlist')], default='No', max_length=256)),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(default=None, max_length=150)),
                ('last_name', models.CharField(default=None, max_length=150)),
                ('email', models.EmailField(default=None, max_length=150)),
                ('skill', models.DecimalField(decimal_places=1, max_digits=4)),
                ('created_by', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('created_by', 'email')},
            },
        ),
        migrations.CreateModel(
            name='PlayerGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Group Name', max_length=100)),
                ('slug', models.SlugField(default='group-name', unique=True)),
                ('created_by', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('members', models.ManyToManyField(related_name='groups', to='OrgDash.player')),
            ],
        ),
        migrations.CreateModel(
            name='Skate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=None)),
                ('time', models.TimeField(default=None)),
                ('location', models.CharField(max_length=200)),
                ('price', models.IntegerField()),
                ('max_guests', models.IntegerField(default=0)),
                ('recurring_event', models.BooleanField(default=False)),
                ('frequency', models.IntegerField(blank=True, choices=[(7, 'Every Week'), (14, 'Every Two Weeks')], default='Every Week')),
                ('send_invites_datetime', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('finalize_event_datetime', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('host', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.DeleteModel(
            name='AutoRecurringSkate',
        ),
        migrations.AddField(
            model_name='invitation',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='OrgDash.skate'),
        ),
        migrations.AddField(
            model_name='invitation',
            name='guest',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='OrgDash.player'),
        ),
        migrations.AddField(
            model_name='invitation',
            name='host',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='invitation',
            unique_together={('guest', 'event')},
        ),
    ]
